
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c19  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000752  00000000  00000000  00000fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000610  00000000  00000000  00001717  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00001d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000416  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000323  00000000  00000000  000022f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00002615  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  64:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDir>:


void DIO_SetPinDir(uint8 Port, uint8 Pin , uint8 Dir)
{
	
	switch (Dir)
  6c:	44 23       	and	r20, r20
  6e:	b9 f1       	breq	.+110    	; 0xde <DIO_SetPinDir+0x72>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	09 f0       	breq	.+2      	; 0x76 <DIO_SetPinDir+0xa>
  74:	6b c0       	rjmp	.+214    	; 0x14c <DIO_SetPinDir+0xe0>
	{
		
	case DIO_PIN_OUTPUT :
	
	  switch(Port)
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	89 f0       	breq	.+34     	; 0x9c <DIO_SetPinDir+0x30>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPinDir+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	c9 f0       	breq	.+50     	; 0xb2 <DIO_SetPinDir+0x46>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	11 f1       	breq	.+68     	; 0xc8 <DIO_SetPinDir+0x5c>
  84:	08 95       	ret
	  {
		case DIO_PORTA :
		
		SET_BIT(DDRA, Pin);
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPinDir+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPinDir+0x22>
  96:	82 2b       	or	r24, r18
  98:	8a bb       	out	0x1a, r24	; 26
		
		break;
  9a:	08 95       	ret
		
		case DIO_PORTB :
		
		SET_BIT(DDRB, Pin);
  9c:	27 b3       	in	r18, 0x17	; 23
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDir+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDir+0x38>
  ac:	82 2b       	or	r24, r18
  ae:	87 bb       	out	0x17, r24	; 23
		
		break;
  b0:	08 95       	ret
		
		case DIO_PORTC :
		
		SET_BIT(DDRC, Pin);
  b2:	24 b3       	in	r18, 0x14	; 20
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDir+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDir+0x4e>
  c2:	82 2b       	or	r24, r18
  c4:	84 bb       	out	0x14, r24	; 20
		
		break;
  c6:	08 95       	ret
		
		case DIO_PORTD :
		
		SET_BIT(DDRD, Pin);
  c8:	21 b3       	in	r18, 0x11	; 17
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDir+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDir+0x64>
  d8:	82 2b       	or	r24, r18
  da:	81 bb       	out	0x11, r24	; 17
		
		break;
  dc:	08 95       	ret
	
	break;
	
	case DIO_PIN_INPUT :
	
	switch(Port)
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 f0       	breq	.+36     	; 0x106 <DIO_SetPinDir+0x9a>
  e2:	28 f0       	brcs	.+10     	; 0xee <DIO_SetPinDir+0x82>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	d9 f0       	breq	.+54     	; 0x11e <DIO_SetPinDir+0xb2>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	29 f1       	breq	.+74     	; 0x136 <DIO_SetPinDir+0xca>
  ec:	08 95       	ret
	{
		case DIO_PORTA :
		
		CLR_BIT(DDRA, Pin);
  ee:	2a b3       	in	r18, 0x1a	; 26
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDir+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDir+0x8a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26
		
		break;
 104:	08 95       	ret
		
		case DIO_PORTB :
		
		CLR_BIT(DDRB, Pin);
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDir+0xa2>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
		
		break;
 11c:	08 95       	ret
		
		case DIO_PORTC :
		
		CLR_BIT(DDRC, Pin);
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDir+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDir+0xba>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
		
		break;
 134:	08 95       	ret
		
		case DIO_PORTD :
		
		CLR_BIT(DDRD, Pin);
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDir+0xd2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <LED0_Init>:
	SET_BIT (PORTD,3);
}

void LED0_OFF(void)
{
	CLR_BIT(PORTD,3);
 14e:	8b 9a       	sbi	0x11, 3	; 17
 150:	08 95       	ret

00000152 <LED0_Toggle>:
}

void LED0_Toggle(void)
{
	Toggle_BIT(PORTD,3);
 152:	92 b3       	in	r25, 0x12	; 18
 154:	88 e0       	ldi	r24, 0x08	; 8
 156:	89 27       	eor	r24, r25
 158:	82 bb       	out	0x12, r24	; 18
 15a:	08 95       	ret

0000015c <LED1_Init>:
	SET_BIT(PORTC,7);
}

void LED_OFF(void)
{
	CLR_BIT(PORTC,7);
 15c:	a7 9a       	sbi	0x14, 7	; 20
 15e:	08 95       	ret

00000160 <Toggle_LED1>:
}

void Toggle_LED1(void)
{
	Toggle_BIT(PORTC,7);
 160:	85 b3       	in	r24, 0x15	; 21
 162:	80 58       	subi	r24, 0x80	; 128
 164:	85 bb       	out	0x15, r24	; 21
 166:	08 95       	ret

00000168 <main>:
#include "LED.h"

int main(void)
{
	uint8 data=0 ,REC;
	LED1_Init();
 168:	0e 94 ae 00 	call	0x15c	; 0x15c <LED1_Init>
	LED0_Init();
 16c:	0e 94 a7 00 	call	0x14e	; 0x14e <LED0_Init>
	SPI_Slave_Init();
 170:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_Slave_Init>
	while (1)
	{
		REC=SPI_TranSiver(data);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 dd 00 	call	0x1ba	; 0x1ba <SPI_TranSiver>
		if(REC ==1)
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	19 f4       	brne	.+6      	; 0x184 <main+0x1c>
		{
			LED0_Toggle();
 17e:	0e 94 a9 00 	call	0x152	; 0x152 <LED0_Toggle>
 182:	f8 cf       	rjmp	.-16     	; 0x174 <main+0xc>
		}
		else if (REC ==2)
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	b1 f7       	brne	.-20     	; 0x174 <main+0xc>
		{
			Toggle_LED1();
 188:	0e 94 b0 00 	call	0x160	; 0x160 <Toggle_LED1>
 18c:	f3 cf       	rjmp	.-26     	; 0x174 <main+0xc>

0000018e <SPI_Slave_Init>:
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
}

void SPI_Master_Tar_Trans(void)
{
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	64 e0       	ldi	r22, 0x04	; 4
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	65 e0       	ldi	r22, 0x05	; 5
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	66 e0       	ldi	r22, 0x06	; 6
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	67 e0       	ldi	r22, 0x07	; 7
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 1b6:	6e 9a       	sbi	0x0d, 6	; 13
 1b8:	08 95       	ret

000001ba <SPI_TranSiver>:
}

uint8 SPI_TranSiver(uint8 data)
{
	 SPDR |= data;
 1ba:	9f b1       	in	r25, 0x0f	; 15
 1bc:	89 2b       	or	r24, r25
 1be:	8f b9       	out	0x0f, r24	; 15
	 while(GET_BIT(SPSR,DIO_PIN7) ==0);
 1c0:	77 9b       	sbis	0x0e, 7	; 14
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <SPI_TranSiver+0x6>
	 return SPDR;
 1c4:	8f b1       	in	r24, 0x0f	; 15
 1c6:	08 95       	ret

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
